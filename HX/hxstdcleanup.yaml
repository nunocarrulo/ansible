---
- name: Cleanup Hyperflex Cluster {{ cluster_name }}
  connection: local
  hosts: "{{ cluster_name }}"
  gather_facts: False
  vars:
    ucsm_login: &ucsm_login 
      hostname: '{{ ucsm_host }}'
      username: '{{ ucsm_user }}'
      password: '{{ ucsm_pwd}}'
  vars_files:
    - group_vars/hx_clusters.yml
    - group_vars/hxvault.yml
    - group_vars/cleanupsp.yml
  vars_prompt:
    - name: "cluster_name"
      prompt: "Which Standard cluster would you like to deploy ?\nCluster list {{ stdClusterList }}"
      confirm: yes
      private: no
      unsafe: no

  tasks:  
# =============== Cluster Validation ====================
    - name: Debug Cluster selection block
      block:
        - name: Verify if HX cluster is Standard
          fail: 
            msg: "Cluster {{ cluster_name }} is not a standard cluster! Aborting..."
          when: cluster_name not in stdClusterList
        - name: Debug Selected Cluster(s)
          debug:
            msg: "Cluster name: {{ cluster_name }} UCSM: {{ ucsm_host }}"
      tags: ["clusterSel"]

# =============== Query ====================
    - name: Block Query Org and existing Service-Profiles
      block:
        - name: Query Org
          cisco.ucs.ucs_query:
            <<: *ucsm_login
            class_ids: orgOrg
          register: orgresult

        - name: Obtain all Servers
          cisco.ucs.ucs_query:
            <<: *ucsm_login
            class_ids: computeItem
          register: hxservers

        - name: Obtain existing HX SPs
          cisco.ucs.ucs_query:
            <<: *ucsm_login
            class_ids: lsServer
          register: hx_SPs

        - name: Set SP List to Disassociate
          set_fact:
            disassocSPList: "{{ disassocSPList | default([]) + [item.name] }}"
          when: hx_SPs is defined and item.assign_state == 'assigned' #and item.assoc_state == 'associated'
          loop: "{{ hx_SPs.objects.lsServer }}"

        - name: Debug Query SP Names
          debug:
            msg: 
              - "-> Existing SP {{ disassocSPList }}"
              - "-> Cleanup SP Names {{ cleanup_splist }}"
      tags: ["query"]

# =============== ORG ====================
    - name: Add Cleanup Organization
      cisco.ucs.ucs_org:
        <<: *ucsm_login
        org_name: cleanup
        description: Test Org
        state: '{{ org_state }}'
      tags: ["org"]

# =============== NETWORK ====================
    - name:  Configure MAC pool
      cisco.ucs.ucs_mac_pool:
        <<: *ucsm_login
        org_dn: "{{ org_dn }}"
        name: '{{ macPool }}'
        first_addr: '{{ MAC_start }}'
        last_addr: '{{ MAC_end }}'
        state: '{{ MAC_state }}'
      tags: ['network']

    - name: Configure vNIC template
      cisco.ucs.ucs_vnic_template:
        <<: *ucsm_login
        org_dn: "{{ org_dn }}"
        name: '{{ cleanup_vnic }}'
        mac_pool: '{{ macPool }}'
        template_type: updating-template
        state: '{{ vnicTempl_state }}'
      tags: ['network']

    - name:  Configure LAN Con Policy
      cisco.ucs.ucs_lan_connectivity:
        <<: *ucsm_login
        org_dn: "{{ org_dn }}"
        name: '{{ lcp_name }}'
        vnic_list:
        - name: eth0
          vnic_template: '{{ cleanup_vnic }}'
        state: '{{ lcp_state }}'
      tags: ['network']

# =============== Server Policies ========================
    - name:  Configure IP pool   
      cisco.ucs.ucs_ip_pool:
        <<: *ucsm_login
        org_dn: "{{ org_dn }}"
        name: '{{ ipPool }}'
        ipv4_blocks:
        - first_addr: '{{ ipPool_start }}'
          last_addr: '{{ ipPool_end }}'
          subnet_mask: '{{ ipPool_mask }}'
          default_gw: '{{ ipPool_DG }}'
        state: '{{ ipPool_state }}'
      tags: ['serverPol']

    - name: Configure UUID address pool
      cisco.ucs.ucs_uuid_pool:
        <<: *ucsm_login
        org_dn: "{{ org_dn }}"
        name: '{{ UUID_name }}'
        order: sequential
        first_uuid: '{{ UUID_start }}'
        last_uuid: '{{ UUID_end }}'
        state: '{{ UUID_state }}'
      tags: ['serverPol']

    - name: Configure Boot Policy
      ucs_managed_objects:
        <<: *ucsm_login
        objects: "{{ item.objects }}"
        state: '{{ bp_state }}'
      #when: item.objects is defined
      no_log: "{{ noLog }}"
      with_items: "{{ ucs_boot_policies }}"
      tags: ['serverPol']

    - name: Configure vMedia Policy
      ucs_managed_objects:
        <<: *ucsm_login
        objects: "{{ item.objects }}"
        state: '{{ vMedia_state }}'
      no_log: "{{ noLog }}"
      #when: item.objects is defined
      with_items: "{{ ucs_vmedia_policies }}"
      tags: ['serverPol']

    #=============== Template & Service Profile Creation & Association ======================== 
    - name: Configure Cleanup SP Template
      cisco.ucs.ucs_service_profile_template:
        <<: *ucsm_login
        org_dn: "{{ org_dn }}"
        name: '{{ spt_name }}'
        description:  Cleanup Template
        template_type: updating-template
        uuid_pool: '{{ UUID_name }}'
        mgmt_ip_pool: '{{ ipPool }}'
        mgmt_ip_state: pooled
        lan_connectivity_policy: '{{ lcp_name }}'
        boot_policy: '{{ bp_name }}'
        vmedia_policy: '{{ vMediaPolName }}'
        state: '{{ spt_state }}'
      tags: ["sptemplate"]

    - name: Configure Cleanup SPs from Template
      cisco.ucs.ucs_service_profile_from_template:
        <<: *ucsm_login
        org_dn: "{{ org_dn }}"
        name: '{{ item }}'
        source_template: '{{ spt_name }}'
      loop: '{{ cleanup_splist }}'
      tags: ["spconfig"]

    - name: Disassociate HX SPs 
      cisco.ucs.ucs_service_profile_association:
        <<: *ucsm_login
        org_dn: "{{ hx_org_dn }}"
        service_profile_name: '{{ item }}'
        state: absent
      register: disassocRes
      loop: "{{ disassocSPList }}"
      when: disassocSPList is defined
      until: disassocRes.assign_state == 'unassigned' and disassocRes.assoc_state == 'unassociated' 
      tags: ["spdisassoc"]

    - name: Associate Cleanup SPs
      cisco.ucs.ucs_service_profile_association:
        <<: *ucsm_login
        org_dn: "{{ org_dn }}"
        service_profile_name: '{{ item.key }}'
        server_assignment: server
        server_dn: "{{ item.value }}"
      with_dict: item
      loop: "{{ comboSPDN }}"
      tags: ["spassoc"]

##### Create a delay to give enough time for ESXi installation
    - name: Collect only Datetime facts 
      setup:
        filter: ansible_date_time

    - name: ESXi Installation
      pause: 
        prompt: "Start time: {{ ansible_date_time.iso8601 }} {{ansible_date_time.tz }} \n
        Did SP Association & ESXi installation complete for all hosts (yes/no) ? If 'no', Do NOT proceed or ESXi Installation may fail"
        echo: yes
        minutes: 180
      register: assign_response
      retries: 10
      delay: 1
      until: assign_response.user_input == 'yes'
      tags: ["install"]

    - name: Remove Cleanup Organization
      cisco.ucs.ucs_org:
        <<: *ucsm_login
        org_name: "{{ org_name }}"
        state: absent
      tags: ["remCleanupOrg"]

    - name: Remove Hyperflex {{ hx_org_name }} Organization
      cisco.ucs.ucs_org:
        <<: *ucsm_login
        org_name: "{{ hx_org_name }}"
        state: absent
      tags: ["remHXOrg"]

# Delete the cluster from vCenter
    - name: Delete Cluster {{ cluster_name }} from "{{ vc_host }}"
      community.vmware.vmware_cluster:
        hostname: "{{ vc_host }}"
        username: "{{ vc_admin }}"
        password: "{{ vc_pwd }}"
        datacenter_name: "{{ vc_datacenter }}"
        cluster_name: "{{ vc_cluster }}"
        state: absent
      when: vc_host is defined
      tags: ["vc"]